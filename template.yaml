AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: >
  eventbridge-integration-solution-buildkite-build-workflow
  **WARNING** This template creates AWS resources. 
  You will be billed for the AWS resources used if you create a stack from this template. (qs-1qp6nnrc5)
Metadata:
  AWS::ServerlessRepo::Application:
    Name: Amazon-EventBridge-Integration-Solution-Buildkite-Build-Workflow
    Description: This application demonstrates an integration with AWS Step Functions for Buildkite. 
    Author: AWS Quick Start
    LicenseUrl: LICENSE
    ReadmeUrl: README.md
    Labels:
    - amazon
    - eventbridge
    - integration
    - solution
    - aws
    - step_functions
    - buildkite
    HomePageUrl: https://aws.amazon.com/quickstart/eventbridge/buildkite-build-workflow/
    SemanticVersion: 0.1.2
    SourceCodeUrl: https://github.com/aws-quickstart/eventbridge-integration-solution-buildkite-build-workflow
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Amazon EventBridge Integration Solution
      Parameters:
      - EventSourceName
    - Label:
        default: Amazon S3
      Parameters:
      - BucketName
    - Label:
        default: Amazon SNS
      Parameters:
      - ContactEmail
    ParameterLabels:
      EventSourceName:
        default: Event Source Name
      BucketName:
        default: Bucket Name
      ContactEmail:
        default: Contact Email
Parameters:
  EventSourceName:
    Type: String
    AllowedPattern: aws\.partner(/[\.\-_A-Za-z0-9]+){2,}
    MinLength: 1
    MaxLength: 256
    Description: Name of the Buildkite Partner Event Source to associate with an Event Bus. For example, aws.partner/buildkite.com/<org-slug>/<uuid>
  BucketName:
    Type: String
    Default: ''
    AllowedPattern: '[a-zA-Z0-9.-]*'
    MaxLength: 63
    Description: Name of the Amazon S3 Bucket to create. Leave blank for an automatically generated name.
  ContactEmail:
    Type: String
    MinLength: 1
    Description: Email address for user to be notified from the Amazon SNS topic

Conditions:
  AutoGenerateBucketName:
    !Equals [ !Ref BucketName, '' ]

Globals:
  Function:
    Runtime: python3.8
    Timeout: 3

Resources:
  EventBridgeEventBus:
    Type: AWS::Events::EventBus
    Properties:
      EventSourceName: !Ref EventSourceName
      Name: !Ref EventSourceName

  BuildkiteRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Buildkite Build Started Rule
      EventBusName: !GetAtt EventBridgeEventBus.Name
      EventPattern:
        detail-type:
        - Build Started
      State: ENABLED
      Targets:
      - Arn: !Ref WorkFlowStepFunctions
        Id: WorkFlowStepFunctions
        RoleArn: !GetAtt WorkFlowExecutionRole.Arn

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      BucketName:
        !If [ AutoGenerateBucketName, !Ref 'AWS::NoValue', !Ref BucketName ]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  SavetoS3Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/save_to_s3
      Handler: app.lambda_handler
      Environment:
        Variables:
          s3_bucket_name: !Ref S3Bucket
      Policies:
      - S3WritePolicy:
          BucketName: !Ref S3Bucket

  NotifyUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/notification
      Handler: app.lambda_handler

  WorkFlowExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
              !Sub events.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: InvokeStepFunctionsPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - states:StartExecution
            Resource: !Ref WorkFlowStepFunctions

  StatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
              !Sub states.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: StatesExecutionPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogDelivery
            - logs:GetLogDelivery
            - logs:UpdateLogDelivery
            - logs:DeleteLogDelivery
            - logs:ListLogDeliveries
            - logs:PutResourcePolicy
            - logs:DescribeResourcePolicies
            - logs:DescribeLogGroups
            Resource: '*'
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource:
            - !GetAtt SavetoS3Function.Arn
            - !GetAtt NotifyUserFunction.Arn
          - Effect: Allow
            Action:
            - sns:Publish
            Resource:
            - !Ref NotifyUserTopic

  WorkFlowStepFunctions:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        !Sub
        - |
          {
            "StartAt": "Save Artifact to S3",
            "States": {
              "Save Artifact to S3": {
                "Type": "Task",
                "Resource": "${lambdaArn}",
                "Next": "Format Notification"
              },
              "Format Notification": {
                "Type": "Task",
                "Resource": "${lambda2Arn}",
                "Next": "Publish to SNS"
              },
              "Publish to SNS": {
                "Type": "Task",
                "Resource": "arn:aws:states:::sns:publish",
                "Parameters": {
                  "TopicArn": "${snsArn}",
                  "Message.$": "$.message",
                  "Subject.$": "$.subject"
                },
                "End": true
              }
            }
          }
        - lambdaArn: !GetAtt SavetoS3Function.Arn
          lambda2Arn: !GetAtt NotifyUserFunction.Arn
          snsArn: !Ref NotifyUserTopic
      RoleArn: !GetAtt StatesExecutionRole.Arn

  NotifyUserTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: !Ref ContactEmail
        Protocol: email

Outputs:
  EventBridgeEventBus:
    Description: SaaS Event Bus ARN
    Value: !GetAtt EventBridgeEventBus.Arn
  EventBridgeRule:
    Description: EventBridge Rule ARN
    Value: !GetAtt BuildkiteRule.Arn
  SavetoS3Function:
    Description: Lambda S3 Function ARN
    Value: !GetAtt SavetoS3Function.Arn
  NotifyUserFunction:
    Description: Lambda Notification Function ARN
    Value: !GetAtt NotifyUserFunction.Arn
